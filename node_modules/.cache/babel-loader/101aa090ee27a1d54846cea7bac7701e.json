{"ast":null,"code":"import _defineProperty from \"/home/gabriella/Documentos/lar_front_end/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/gabriella/Documentos/lar_front_end/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gabriella/Documentos/lar_front_end/src/components/plugin/Dustbin.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import React from 'react'\n// import ReactDOM from 'react-dom';\n// import { useDrop } from 'react-dnd'\n// import ItemTypes from './ItemTypes'\n// const style = {\n//   border: '1px dashed gray',\n//   backgroundColor: 'white',\n//   width: '100%',\n//   height: '200px',\n//   marginRight: '1.5rem',\n//   marginBottom: '1.5rem',\n//   color: '#222',\n//   padding: '1rem',\n//   textAlign: 'center',\n//   fontSize: '1rem',\n//   lineHeight: 'normal',\n//   float: 'left',\n// }\n// // const Dustbin = ({lastDroppedItem, onDrop}) => {\n// //   const [{ canDrop, isOver}, drop] = useDrop({\n// //     accept: ItemTypes.BOX,\n// //     drop: (item, monitor) => {\n// //       console.log(onDrop);\n// //     },\n// //     // drop: (item, monitor) => ({ name: item }),\n// //     // {\n// //     //   // const addedItem = monitor.getDropResult()\n// //     //   const name = 'Dustbin' \n// //     //   // console.log(addedItem);\n// //     //   // console.log(item);\n// //     //   // console.log(monitor);\n// //     //   const domContainer = document.querySelector('#selecao');\n// //     //   ReactDOM.render(item, domContainer);\n// //     // },\n// //     collect: monitor => ({\n// //       isOver: monitor.isOver(),\n// //       canDrop: monitor.canDrop(),\n// //     }),\n// //   })\n// //   const isActive = canDrop && isOver\n// //   let backgroundColor = 'white'\n// //   if (isActive) {\n// //     backgroundColor = 'darkgreen'\n// //   } else if (canDrop) {\n// //     backgroundColor = 'darkkhaki'\n// //   }\n// //   return (\n// //     <div id=\"selecao\" style={{ ...style, backgroundColor }}>\n// //       {isActive ? 'Release to drop' : 'Drag a box here'}\n// //     </div>\n// //   )\n// // }\n// // export default Dustbin\n// const Dustbin = ({ accept, lastDroppedItem, onDrop }) => {\n//   const [{ isOver, canDrop }, drop] = useDrop({\n//     accept,\n//     drop: onDrop,\n//     collect: monitor => ({\n//       isOver: monitor.isOver(),\n//       canDrop: monitor.canDrop(),\n//     }),\n//   })\n//   const isActive = isOver && canDrop\n//   let backgroundColor = '#222'\n//   if (isActive) {\n//     backgroundColor = 'darkgreen'\n//   } else if (canDrop) {\n//     backgroundColor = 'darkkhaki'\n//   }\n//   return (\n//     <div ref={drop} style={{ ...style, backgroundColor }}>\n//       {isActive\n//         ? 'Release to drop'\n//         : `This dustbin accepts: ${accept.join(', ')}`}\n//       {lastDroppedItem && (\n//         <p>Last dropped: {JSON.stringify(lastDroppedItem)}</p>\n//       )}\n//     </div>\n//   )\n// }\n// export default Dustbin\nimport React from 'react';\nimport { useDrop } from 'react-dnd';\nconst style = {\n  height: '12rem',\n  width: '12rem',\n  marginRight: '1.5rem',\n  marginBottom: '1.5rem',\n  color: 'white',\n  padding: '1rem',\n  textAlign: 'center',\n  fontSize: '1rem',\n  lineHeight: 'normal',\n  float: 'left'\n};\n\nconst Dustbin = ({\n  accept,\n  lastDroppedItem,\n  onDrop\n}) => {\n  const _useDrop = useDrop({\n    accept,\n    drop: onDrop,\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  }),\n        _useDrop2 = _slicedToArray(_useDrop, 2),\n        _useDrop2$ = _useDrop2[0],\n        isOver = _useDrop2$.isOver,\n        canDrop = _useDrop2$.canDrop,\n        drop = _useDrop2[1];\n\n  const isActive = isOver && canDrop;\n  let backgroundColor = '#222';\n\n  if (isActive) {\n    backgroundColor = 'darkgreen';\n  } else if (canDrop) {\n    backgroundColor = 'darkkhaki';\n  }\n\n  return React.createElement(\"div\", {\n    ref: drop,\n    style: _objectSpread({}, style, {\n      backgroundColor\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, isActive ? 'Release to drop' : \"This dustbin accepts: \".concat(accept.join(', ')), lastDroppedItem && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Last dropped: \", JSON.stringify(lastDroppedItem)));\n};\n\nexport default Dustbin;","map":{"version":3,"sources":["/home/gabriella/Documentos/lar_front_end/src/components/plugin/Dustbin.jsx"],"names":["React","useDrop","style","height","width","marginRight","marginBottom","color","padding","textAlign","fontSize","lineHeight","float","Dustbin","accept","lastDroppedItem","onDrop","drop","collect","monitor","isOver","canDrop","isActive","backgroundColor","join","JSON","stringify"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE,OADI;AAEZC,EAAAA,KAAK,EAAE,OAFK;AAGZC,EAAAA,WAAW,EAAE,QAHD;AAIZC,EAAAA,YAAY,EAAE,QAJF;AAKZC,EAAAA,KAAK,EAAE,OALK;AAMZC,EAAAA,OAAO,EAAE,MANG;AAOZC,EAAAA,SAAS,EAAE,QAPC;AAQZC,EAAAA,QAAQ,EAAE,MARE;AASZC,EAAAA,UAAU,EAAE,QATA;AAUZC,EAAAA,KAAK,EAAE;AAVK,CAAd;;AAYA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,eAAV;AAA2BC,EAAAA;AAA3B,CAAD,KAAyC;AAAA,mBACnBf,OAAO,CAAC;AAC1Ca,IAAAA,MAD0C;AAE1CG,IAAAA,IAAI,EAAED,MAFoC;AAG1CE,IAAAA,OAAO,EAAEC,OAAO,KAAK;AACnBC,MAAAA,MAAM,EAAED,OAAO,CAACC,MAAR,EADW;AAEnBC,MAAAA,OAAO,EAAEF,OAAO,CAACE,OAAR;AAFU,KAAL;AAH0B,GAAD,CADY;AAAA;AAAA;AAAA,QAC9CD,MAD8C,cAC9CA,MAD8C;AAAA,QACtCC,OADsC,cACtCA,OADsC;AAAA,QAC3BJ,IAD2B;;AASvD,QAAMK,QAAQ,GAAGF,MAAM,IAAIC,OAA3B;AACA,MAAIE,eAAe,GAAG,MAAtB;;AACA,MAAID,QAAJ,EAAc;AACZC,IAAAA,eAAe,GAAG,WAAlB;AACD,GAFD,MAEO,IAAIF,OAAJ,EAAa;AAClBE,IAAAA,eAAe,GAAG,WAAlB;AACD;;AACD,SACE;AAAK,IAAA,GAAG,EAAEN,IAAV;AAAgB,IAAA,KAAK,oBAAOf,KAAP;AAAcqB,MAAAA;AAAd,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QAAQ,GACL,iBADK,mCAEoBR,MAAM,CAACU,IAAP,CAAY,IAAZ,CAFpB,CADX,EAKGT,eAAe,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkBU,IAAI,CAACC,SAAL,CAAeX,eAAf,CAAlB,CANJ,CADF;AAWD,CA3BD;;AA4BA,eAAeF,OAAf","sourcesContent":["// import React from 'react'\n// import ReactDOM from 'react-dom';\n// import { useDrop } from 'react-dnd'\n// import ItemTypes from './ItemTypes'\n\n// const style = {\n//   border: '1px dashed gray',\n//   backgroundColor: 'white',\n//   width: '100%',\n//   height: '200px',\n//   marginRight: '1.5rem',\n//   marginBottom: '1.5rem',\n//   color: '#222',\n//   padding: '1rem',\n//   textAlign: 'center',\n//   fontSize: '1rem',\n//   lineHeight: 'normal',\n//   float: 'left',\n// }\n// // const Dustbin = ({lastDroppedItem, onDrop}) => {\n// //   const [{ canDrop, isOver}, drop] = useDrop({\n// //     accept: ItemTypes.BOX,\n// //     drop: (item, monitor) => {\n// //       console.log(onDrop);\n// //     },\n// //     // drop: (item, monitor) => ({ name: item }),\n// //     // {\n// //     //   // const addedItem = monitor.getDropResult()\n// //     //   const name = 'Dustbin' \n// //     //   // console.log(addedItem);\n// //     //   // console.log(item);\n// //     //   // console.log(monitor);\n// //     //   const domContainer = document.querySelector('#selecao');\n// //     //   ReactDOM.render(item, domContainer);\n// //     // },\n// //     collect: monitor => ({\n// //       isOver: monitor.isOver(),\n// //       canDrop: monitor.canDrop(),\n// //     }),\n// //   })\n// //   const isActive = canDrop && isOver\n// //   let backgroundColor = 'white'\n// //   if (isActive) {\n// //     backgroundColor = 'darkgreen'\n// //   } else if (canDrop) {\n// //     backgroundColor = 'darkkhaki'\n// //   }\n// //   return (\n// //     <div id=\"selecao\" style={{ ...style, backgroundColor }}>\n// //       {isActive ? 'Release to drop' : 'Drag a box here'}\n// //     </div>\n// //   )\n// // }\n// // export default Dustbin\n\n// const Dustbin = ({ accept, lastDroppedItem, onDrop }) => {\n//   const [{ isOver, canDrop }, drop] = useDrop({\n//     accept,\n//     drop: onDrop,\n//     collect: monitor => ({\n//       isOver: monitor.isOver(),\n//       canDrop: monitor.canDrop(),\n//     }),\n//   })\n//   const isActive = isOver && canDrop\n//   let backgroundColor = '#222'\n//   if (isActive) {\n//     backgroundColor = 'darkgreen'\n//   } else if (canDrop) {\n//     backgroundColor = 'darkkhaki'\n//   }\n//   return (\n//     <div ref={drop} style={{ ...style, backgroundColor }}>\n//       {isActive\n//         ? 'Release to drop'\n//         : `This dustbin accepts: ${accept.join(', ')}`}\n\n//       {lastDroppedItem && (\n//         <p>Last dropped: {JSON.stringify(lastDroppedItem)}</p>\n//       )}\n//     </div>\n//   )\n// }\n// export default Dustbin\nimport React from 'react'\nimport { useDrop } from 'react-dnd'\nconst style = {\n  height: '12rem',\n  width: '12rem',\n  marginRight: '1.5rem',\n  marginBottom: '1.5rem',\n  color: 'white',\n  padding: '1rem',\n  textAlign: 'center',\n  fontSize: '1rem',\n  lineHeight: 'normal',\n  float: 'left',\n}\nconst Dustbin = ({ accept, lastDroppedItem, onDrop }) => {\n  const [{ isOver, canDrop }, drop] = useDrop({\n    accept,\n    drop: onDrop,\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  })\n  const isActive = isOver && canDrop\n  let backgroundColor = '#222'\n  if (isActive) {\n    backgroundColor = 'darkgreen'\n  } else if (canDrop) {\n    backgroundColor = 'darkkhaki'\n  }\n  return (\n    <div ref={drop} style={{ ...style, backgroundColor }}>\n      {isActive\n        ? 'Release to drop'\n        : `This dustbin accepts: ${accept.join(', ')}`}\n\n      {lastDroppedItem && (\n        <p>Last dropped: {JSON.stringify(lastDroppedItem)}</p>\n      )}\n    </div>\n  )\n}\nexport default Dustbin\n\n"]},"metadata":{},"sourceType":"module"}