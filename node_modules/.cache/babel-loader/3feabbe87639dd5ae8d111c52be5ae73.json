{"ast":null,"code":"var _jsxFileName = \"/home/gabriella/Documentos/lar-ureto-front-end/src/components/plugin/example.jsx\";\nimport React, { useState, useCallback } from 'react';\nimport Dustbin from './Dustbin';\nimport Box from './Box';\nimport ItemTypes from './ItemTypes';\nimport update from 'immutability-helper';\nconst style = {\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'space-between',\n  flexDirection: 'row'\n};\n\nconst Container = () => {\n  const [dustbins, setDustbins] = useState([{\n    accepts: [ItemTypes.BOX],\n    lastDroppedItem: null\n  }]);\n  const [boxes] = useState([{\n    name: 'down',\n    classeName: 'btn btn-success',\n    html: '<i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i>',\n    type: ItemTypes.BOX\n  }, {\n    name: 'up',\n    classeName: 'btn btn-success',\n    html: '<i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i>',\n    type: ItemTypes.BOX\n  }, // { name: 'stop', classeName: 'btn btn-danger', html: '<i class=\"fa fa-stop\" aria-hidden=\"true\"></i>', type: ItemTypes.BOX },\n  {\n    name: 'left',\n    classeName: 'btn btn-success',\n    html: '<i class=\"fa fa-reply\" aria-hidden=\"true\"></i>',\n    type: ItemTypes.BOX\n  }, {\n    name: 'right',\n    classeName: 'btn btn-success',\n    html: '<i class=\"fa fa-share\" aria-hidden=\"true\"></i>',\n    type: ItemTypes.BOX\n  }, {\n    name: 'multiple',\n    classeName: 'btn btn-warning',\n    html: '<i class=\"fa fa-times\" aria-hidden=\"true\"></i>',\n    type: ItemTypes.BOX\n  } // { name: 'function', classeName: 'btn btn-info', html: '<i class=\"fa fa-cog\" aria-hidden=\"true\"></i>', type: ItemTypes.BOX },\n  ]);\n  const [droppedBoxNames, setDroppedBoxNames] = useState([]);\n\n  function isDropped(boxName) {\n    return droppedBoxNames.indexOf(boxName) > -1;\n  }\n\n  const handleDrop = useCallback((index, item) => {\n    const {\n      name\n    } = item;\n    setDroppedBoxNames(update(droppedBoxNames, name ? {\n      $push: [item]\n    } : {\n      $push: []\n    }));\n    setDustbins(update(dustbins, {\n      [index]: {\n        lastDroppedItem: {\n          $set: item\n        }\n      }\n    }));\n  }, [droppedBoxNames, dustbins]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    style: { ...style\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-sm-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, boxes.map(({\n    name,\n    classeName,\n    html,\n    type\n  }, index) => /*#__PURE__*/React.createElement(Box, {\n    name: name,\n    classeName: classeName,\n    html: html,\n    type: type,\n    isDropped: isDropped(name),\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-sm-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      overflow: 'hidden',\n      clear: 'both'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, dustbins.map(({\n    accepts,\n    lastDroppedItem\n  }, index) => /*#__PURE__*/React.createElement(Dustbin, {\n    accept: accepts,\n    lastDroppedItem: lastDroppedItem,\n    droppedBoxNames: droppedBoxNames,\n    onDrop: item => handleDrop(index, item),\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default Container;","map":{"version":3,"sources":["/home/gabriella/Documentos/lar-ureto-front-end/src/components/plugin/example.jsx"],"names":["React","useState","useCallback","Dustbin","Box","ItemTypes","update","style","display","flexWrap","justifyContent","flexDirection","Container","dustbins","setDustbins","accepts","BOX","lastDroppedItem","boxes","name","classeName","html","type","droppedBoxNames","setDroppedBoxNames","isDropped","boxName","indexOf","handleDrop","index","item","$push","$set","map","overflow","clear"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,OAAO,EAAE,MADG;AAEZC,EAAAA,QAAQ,EAAE,MAFE;AAGZC,EAAAA,cAAc,EAAE,eAHJ;AAIZC,EAAAA,aAAa,EAAE;AAJH,CAAd;;AAMA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,CACvC;AAAEc,IAAAA,OAAO,EAAE,CAACV,SAAS,CAACW,GAAX,CAAX;AAA4BC,IAAAA,eAAe,EAAE;AAA7C,GADuC,CAAD,CAAxC;AAGA,QAAM,CAACC,KAAD,IAAUjB,QAAQ,CAAC,CACvB;AAAEkB,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,UAAU,EAAE,iBAA5B;AAA+CC,IAAAA,IAAI,EAAE,qDAArD;AAA4GC,IAAAA,IAAI,EAAEjB,SAAS,CAACW;AAA5H,GADuB,EAEvB;AAAEG,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,UAAU,EAAE,iBAA1B;AAA6CC,IAAAA,IAAI,EAAE,mDAAnD;AAAwGC,IAAAA,IAAI,EAAEjB,SAAS,CAACW;AAAxH,GAFuB,EAGvB;AACA;AAAEG,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,UAAU,EAAE,iBAA5B;AAA+CC,IAAAA,IAAI,EAAE,gDAArD;AAAuGC,IAAAA,IAAI,EAAEjB,SAAS,CAACW;AAAvH,GAJuB,EAKvB;AAAEG,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,UAAU,EAAE,iBAA7B;AAAgDC,IAAAA,IAAI,EAAE,gDAAtD;AAAwGC,IAAAA,IAAI,EAAEjB,SAAS,CAACW;AAAxH,GALuB,EAMvB;AAAEG,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,UAAU,EAAE,iBAAhC;AAAmDC,IAAAA,IAAI,EAAE,gDAAzD;AAA2GC,IAAAA,IAAI,EAAEjB,SAAS,CAACW;AAA3H,GANuB,CAOvB;AAPuB,GAAD,CAAxB;AASA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCvB,QAAQ,CAAC,EAAD,CAAtD;;AACA,WAASwB,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,WAAOH,eAAe,CAACI,OAAhB,CAAwBD,OAAxB,IAAmC,CAAC,CAA3C;AACD;;AACD,QAAME,UAAU,GAAG1B,WAAW,CAC5B,CAAC2B,KAAD,EAAQC,IAAR,KAAiB;AACf,UAAM;AAAEX,MAAAA;AAAF,QAAWW,IAAjB;AACAN,IAAAA,kBAAkB,CAChBlB,MAAM,CAACiB,eAAD,EAAkBJ,IAAI,GAAG;AAAEY,MAAAA,KAAK,EAAE,CAACD,IAAD;AAAT,KAAH,GAAuB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7C,CADU,CAAlB;AAGAjB,IAAAA,WAAW,CACTR,MAAM,CAACO,QAAD,EAAW;AACf,OAACgB,KAAD,GAAS;AACPZ,QAAAA,eAAe,EAAE;AACfe,UAAAA,IAAI,EAAEF;AADS;AADV;AADM,KAAX,CADG,CAAX;AASD,GAf2B,EAgB5B,CAACP,eAAD,EAAkBV,QAAlB,CAhB4B,CAA9B;AAkBA,sBACE;AAAK,IAAA,SAAS,EAAC,EAAf;AAAkB,IAAA,KAAK,EAAE,EAAE,GAAGN;AAAL,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGW,KAAK,CAACe,GAAN,CAAU,CAAC;AAAEd,IAAAA,IAAF;AAAQC,IAAAA,UAAR;AAAoBC,IAAAA,IAApB;AAA0BC,IAAAA;AAA1B,GAAD,EAAmCO,KAAnC,kBACT,oBAAC,GAAD;AACE,IAAA,IAAI,EAAEV,IADR;AAEE,IAAA,UAAU,EAAEC,UAFd;AAGE,IAAA,IAAI,EAAEC,IAHR;AAIE,IAAA,IAAI,EAAEC,IAJR;AAKE,IAAA,SAAS,EAAEG,SAAS,CAACN,IAAD,CALtB;AAME,IAAA,GAAG,EAAEU,KANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF,CADF,eAeE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,KAAK,EAAE;AAAEK,MAAAA,QAAQ,EAAE,QAAZ;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGtB,QAAQ,CAACoB,GAAT,CAAa,CAAC;AAAElB,IAAAA,OAAF;AAAWE,IAAAA;AAAX,GAAD,EAA+BY,KAA/B,kBACZ,oBAAC,OAAD;AACE,IAAA,MAAM,EAAEd,OADV;AAEE,IAAA,eAAe,EAAEE,eAFnB;AAGE,IAAA,eAAe,EAAEM,eAHnB;AAIE,IAAA,MAAM,EAAEO,IAAI,IAAIF,UAAU,CAACC,KAAD,EAAQC,IAAR,CAJ5B;AAKE,IAAA,GAAG,EAAED,KALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF,CAfF,CADF;AA+BD,CAlED;;AAmEA,eAAejB,SAAf","sourcesContent":["import React, { useState, useCallback } from 'react'\nimport Dustbin from './Dustbin'\nimport Box from './Box'\nimport ItemTypes from './ItemTypes'\nimport update from 'immutability-helper'\nconst style = {\n  display: 'flex', \n  flexWrap: 'wrap', \n  justifyContent: 'space-between', \n  flexDirection: 'row'\n}\nconst Container = () => {\n  const [dustbins, setDustbins] = useState([\n    { accepts: [ItemTypes.BOX], lastDroppedItem: null }\n  ])\n  const [boxes] = useState([\n    { name: 'down', classeName: 'btn btn-success', html: '<i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i>', type: ItemTypes.BOX },\n    { name: 'up', classeName: 'btn btn-success', html: '<i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i>', type: ItemTypes.BOX },\n    // { name: 'stop', classeName: 'btn btn-danger', html: '<i class=\"fa fa-stop\" aria-hidden=\"true\"></i>', type: ItemTypes.BOX },\n    { name: 'left', classeName: 'btn btn-success', html: '<i class=\"fa fa-reply\" aria-hidden=\"true\"></i>', type: ItemTypes.BOX },\n    { name: 'right', classeName: 'btn btn-success', html: '<i class=\"fa fa-share\" aria-hidden=\"true\"></i>', type: ItemTypes.BOX },\n    { name: 'multiple', classeName: 'btn btn-warning', html: '<i class=\"fa fa-times\" aria-hidden=\"true\"></i>', type: ItemTypes.BOX },\n    // { name: 'function', classeName: 'btn btn-info', html: '<i class=\"fa fa-cog\" aria-hidden=\"true\"></i>', type: ItemTypes.BOX },\n  ])\n  const [droppedBoxNames, setDroppedBoxNames] = useState([])\n  function isDropped(boxName) {\n    return droppedBoxNames.indexOf(boxName) > -1\n  }\n  const handleDrop = useCallback(\n    (index, item) => {\n      const { name } = item\n      setDroppedBoxNames(\n        update(droppedBoxNames, name ? { $push: [item] } : { $push: [] }),\n      )\n      setDustbins(\n        update(dustbins, {\n          [index]: {\n            lastDroppedItem: {\n              $set: item,\n            },\n          },\n        }),\n      )\n    },\n    [droppedBoxNames, dustbins],\n  )\n  return (\n    <div className=\"\" style={{ ...style}}>\n      <div className=\"col-sm-2\">\n        <div>\n          {boxes.map(({ name, classeName, html, type }, index) => (\n            <Box\n              name={name}\n              classeName={classeName}\n              html={html}\n              type={type}\n              isDropped={isDropped(name)}\n              key={index}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"col-sm-10\">\n        <div style={{ overflow: 'hidden', clear: 'both' }}>\n          {dustbins.map(({ accepts, lastDroppedItem }, index) => (\n            <Dustbin\n              accept={accepts}\n              lastDroppedItem={lastDroppedItem}\n              droppedBoxNames={droppedBoxNames}\n              onDrop={item => handleDrop(index, item)}\n              key={index}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Container\n"]},"metadata":{},"sourceType":"module"}