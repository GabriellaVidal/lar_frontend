{"ast":null,"code":"import _defineProperty from \"/home/gabriella/Documentos/lar_front_end/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/gabriella/Documentos/lar_front_end/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gabriella/Documentos/lar_front_end/src/components/plugin/Dustbin.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useDrop } from 'react-dnd';\nconst style = {\n  border: '1px dashed gray',\n  width: '100%',\n  minHeight: '200px',\n  marginRight: '1.5rem',\n  marginBottom: '1.5rem',\n  color: '#222',\n  padding: '1rem',\n  textAlign: 'center',\n  fontSize: '1rem',\n  lineHeight: 'normal',\n  float: 'left'\n};\n\nconst Dustbin = ({\n  accept,\n  lastDroppedItem,\n  onDrop,\n  droppedBoxNames\n}) => {\n  const _useDrop = useDrop({\n    accept,\n    drop: onDrop,\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  }),\n        _useDrop2 = _slicedToArray(_useDrop, 2),\n        _useDrop2$ = _useDrop2[0],\n        isOver = _useDrop2$.isOver,\n        canDrop = _useDrop2$.canDrop,\n        drop = _useDrop2[1];\n\n  const isActive = isOver && canDrop;\n  let backgroundColor = 'white';\n\n  if (isActive) {\n    backgroundColor = 'darkgreen';\n  } else if (canDrop) {\n    backgroundColor = 'darkkhaki';\n  }\n\n  return React.createElement(\"div\", {\n    id: \"selectedBox\",\n    ref: drop,\n    style: _objectSpread({}, style, {\n      backgroundColor\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, isActive ? 'Solte o comando na área selecionada' : \"Arraste novos camandos\", lastDroppedItem && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, (() => {\n    const buttons = [];\n\n    for (let i = 0; i < droppedBoxNames.length; i++) {\n      console.log(droppedBoxNames[i]);\n      buttons.push(React.createElement(\"button\", {\n        name: droppedBoxNames[i].name,\n        className: droppedBoxNames[i].classeName,\n        dangerouslySetInnerHTML: {\n          __html: droppedBoxNames[i].html\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }));\n    }\n\n    return buttons;\n  })()));\n};\n\nexport default Dustbin;","map":{"version":3,"sources":["/home/gabriella/Documentos/lar_front_end/src/components/plugin/Dustbin.jsx"],"names":["React","useDrop","style","border","width","minHeight","marginRight","marginBottom","color","padding","textAlign","fontSize","lineHeight","float","Dustbin","accept","lastDroppedItem","onDrop","droppedBoxNames","drop","collect","monitor","isOver","canDrop","isActive","backgroundColor","buttons","i","length","console","log","push","name","classeName","__html","html"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE,iBADI;AAEZC,EAAAA,KAAK,EAAE,MAFK;AAGZC,EAAAA,SAAS,EAAE,OAHC;AAIZC,EAAAA,WAAW,EAAE,QAJD;AAKZC,EAAAA,YAAY,EAAE,QALF;AAMZC,EAAAA,KAAK,EAAE,MANK;AAOZC,EAAAA,OAAO,EAAE,MAPG;AAQZC,EAAAA,SAAS,EAAE,QARC;AASZC,EAAAA,QAAQ,EAAE,MATE;AAUZC,EAAAA,UAAU,EAAE,QAVA;AAWZC,EAAAA,KAAK,EAAE;AAXK,CAAd;;AAaA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,eAAV;AAA2BC,EAAAA,MAA3B;AAAmCC,EAAAA;AAAnC,CAAD,KAAyD;AAAA,mBACnCjB,OAAO,CAAC;AAC1Cc,IAAAA,MAD0C;AAE1CI,IAAAA,IAAI,EAAEF,MAFoC;AAG1CG,IAAAA,OAAO,EAAEC,OAAO,KAAK;AACnBC,MAAAA,MAAM,EAAED,OAAO,CAACC,MAAR,EADW;AAEnBC,MAAAA,OAAO,EAAEF,OAAO,CAACE,OAAR;AAFU,KAAL;AAH0B,GAAD,CAD4B;AAAA;AAAA;AAAA,QAC9DD,MAD8D,cAC9DA,MAD8D;AAAA,QACtDC,OADsD,cACtDA,OADsD;AAAA,QAC3CJ,IAD2C;;AASvE,QAAMK,QAAQ,GAAGF,MAAM,IAAIC,OAA3B;AACA,MAAIE,eAAe,GAAG,OAAtB;;AACA,MAAID,QAAJ,EAAc;AACZC,IAAAA,eAAe,GAAG,WAAlB;AACD,GAFD,MAEO,IAAIF,OAAJ,EAAa;AAClBE,IAAAA,eAAe,GAAG,WAAlB;AACD;;AACD,SACE;AAAK,IAAA,EAAE,EAAC,aAAR;AAAsB,IAAA,GAAG,EAAEN,IAA3B;AAAiC,IAAA,KAAK,oBAAOjB,KAAP;AAAcuB,MAAAA;AAAd,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QAAQ,GACL,qCADK,2BADX,EAKGR,eAAe,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC,MAAM;AACN,UAAMU,OAAO,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,eAAe,CAACU,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/CE,MAAAA,OAAO,CAACC,GAAR,CAAYZ,eAAe,CAACS,CAAD,CAA3B;AACAD,MAAAA,OAAO,CAACK,IAAR,CAAa;AACX,QAAA,IAAI,EAAEb,eAAe,CAACS,CAAD,CAAf,CAAmBK,IADd;AAEX,QAAA,SAAS,EAAEd,eAAe,CAACS,CAAD,CAAf,CAAmBM,UAFnB;AAGX,QAAA,uBAAuB,EAAE;AAACC,UAAAA,MAAM,EAAEhB,eAAe,CAACS,CAAD,CAAf,CAAmBQ;AAA5B,SAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAb;AAKD;;AACD,WAAOT,OAAP;AACD,GAXA,GADH,CANJ,CADF;AAwBD,CAxCD;;AAyCA,eAAeZ,OAAf","sourcesContent":["import React from 'react'\nimport { useDrop } from 'react-dnd'\nconst style = {\n  border: '1px dashed gray',\n  width: '100%',\n  minHeight: '200px',\n  marginRight: '1.5rem',\n  marginBottom: '1.5rem',\n  color: '#222',\n  padding: '1rem',\n  textAlign: 'center',\n  fontSize: '1rem',\n  lineHeight: 'normal',\n  float: 'left',\n}\nconst Dustbin = ({ accept, lastDroppedItem, onDrop, droppedBoxNames}) => {\n  const [{ isOver, canDrop }, drop] = useDrop({\n    accept,\n    drop: onDrop,\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  })\n  const isActive = isOver && canDrop\n  let backgroundColor = 'white'\n  if (isActive) {\n    backgroundColor = 'darkgreen'\n  } else if (canDrop) {\n    backgroundColor = 'darkkhaki'\n  }\n  return (\n    <div id=\"selectedBox\" ref={drop} style={{ ...style, backgroundColor }}>\n      {isActive\n        ? 'Solte o comando na área selecionada'\n        : `Arraste novos camandos`}\n\n      {lastDroppedItem && (\n        <div>\n          {(() => {\n            const buttons = [];\n            for (let i = 0; i < droppedBoxNames.length; i++) {\n              console.log(droppedBoxNames[i]);\n              buttons.push(<button \n                name={droppedBoxNames[i].name} \n                className={droppedBoxNames[i].classeName}\n                dangerouslySetInnerHTML={{__html: droppedBoxNames[i].html}}\n                ></button>);\n            }\n            return buttons;\n          })()}\n        </div>\n      )}\n    </div>\n  )\n}\nexport default Dustbin\n\n"]},"metadata":{},"sourceType":"module"}