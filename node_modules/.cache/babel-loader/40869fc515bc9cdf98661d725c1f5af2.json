{"ast":null,"code":"import _defineProperty from \"/home/gabriella/Documentos/lar_front_end/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/gabriella/Documentos/lar_front_end/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gabriella/Documentos/lar_front_end/src/components/plugin/Dustbin.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useDrop } from 'react-dnd';\nconst style = {\n  border: '1px dashed gray',\n  width: '100%',\n  height: '200px',\n  marginRight: '1.5rem',\n  marginBottom: '1.5rem',\n  color: '#222',\n  padding: '1rem',\n  textAlign: 'center',\n  fontSize: '1rem',\n  lineHeight: 'normal',\n  float: 'left'\n};\n\nconst Dustbin = ({\n  accept,\n  lastDroppedItem,\n  onDrop\n}) => {\n  const _useDrop = useDrop({\n    accept,\n    drop: onDrop,\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  }),\n        _useDrop2 = _slicedToArray(_useDrop, 2),\n        _useDrop2$ = _useDrop2[0],\n        isOver = _useDrop2$.isOver,\n        canDrop = _useDrop2$.canDrop,\n        drop = _useDrop2[1];\n\n  const isActive = isOver && canDrop;\n  let backgroundColor = 'white';\n\n  if (isActive) {\n    backgroundColor = 'darkgreen';\n  } else if (canDrop) {\n    backgroundColor = 'darkkhaki';\n  }\n\n  return React.createElement(\"div\", {\n    ref: drop,\n    style: _objectSpread({}, style, {\n      backgroundColor\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, isActive ? 'Release to drop' : \"This dustbin accepts: \".concat(accept.join(', ')), lastDroppedItem && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Last dropped: \", JSON.stringify(lastDroppedItem)));\n};\n\nexport default Dustbin;","map":{"version":3,"sources":["/home/gabriella/Documentos/lar_front_end/src/components/plugin/Dustbin.jsx"],"names":["React","useDrop","style","border","width","height","marginRight","marginBottom","color","padding","textAlign","fontSize","lineHeight","float","Dustbin","accept","lastDroppedItem","onDrop","drop","collect","monitor","isOver","canDrop","isActive","backgroundColor","join","JSON","stringify"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE,iBADI;AAEZC,EAAAA,KAAK,EAAE,MAFK;AAGZC,EAAAA,MAAM,EAAE,OAHI;AAIZC,EAAAA,WAAW,EAAE,QAJD;AAKZC,EAAAA,YAAY,EAAE,QALF;AAMZC,EAAAA,KAAK,EAAE,MANK;AAOZC,EAAAA,OAAO,EAAE,MAPG;AAQZC,EAAAA,SAAS,EAAE,QARC;AASZC,EAAAA,QAAQ,EAAE,MATE;AAUZC,EAAAA,UAAU,EAAE,QAVA;AAWZC,EAAAA,KAAK,EAAE;AAXK,CAAd;;AAaA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,eAAV;AAA2BC,EAAAA;AAA3B,CAAD,KAAyC;AAAA,mBACnBhB,OAAO,CAAC;AAC1Cc,IAAAA,MAD0C;AAE1CG,IAAAA,IAAI,EAAED,MAFoC;AAG1CE,IAAAA,OAAO,EAAEC,OAAO,KAAK;AACnBC,MAAAA,MAAM,EAAED,OAAO,CAACC,MAAR,EADW;AAEnBC,MAAAA,OAAO,EAAEF,OAAO,CAACE,OAAR;AAFU,KAAL;AAH0B,GAAD,CADY;AAAA;AAAA;AAAA,QAC9CD,MAD8C,cAC9CA,MAD8C;AAAA,QACtCC,OADsC,cACtCA,OADsC;AAAA,QAC3BJ,IAD2B;;AASvD,QAAMK,QAAQ,GAAGF,MAAM,IAAIC,OAA3B;AACA,MAAIE,eAAe,GAAG,OAAtB;;AACA,MAAID,QAAJ,EAAc;AACZC,IAAAA,eAAe,GAAG,WAAlB;AACD,GAFD,MAEO,IAAIF,OAAJ,EAAa;AAClBE,IAAAA,eAAe,GAAG,WAAlB;AACD;;AACD,SACE;AAAK,IAAA,GAAG,EAAEN,IAAV;AAAgB,IAAA,KAAK,oBAAOhB,KAAP;AAAcsB,MAAAA;AAAd,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QAAQ,GACL,iBADK,mCAEoBR,MAAM,CAACU,IAAP,CAAY,IAAZ,CAFpB,CADX,EAKGT,eAAe,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkBU,IAAI,CAACC,SAAL,CAAeX,eAAf,CAAlB,CANJ,CADF;AAWD,CA3BD;;AA4BA,eAAeF,OAAf","sourcesContent":["import React from 'react'\nimport { useDrop } from 'react-dnd'\nconst style = {\n  border: '1px dashed gray',\n  width: '100%',\n  height: '200px',\n  marginRight: '1.5rem',\n  marginBottom: '1.5rem',\n  color: '#222',\n  padding: '1rem',\n  textAlign: 'center',\n  fontSize: '1rem',\n  lineHeight: 'normal',\n  float: 'left',\n}\nconst Dustbin = ({ accept, lastDroppedItem, onDrop }) => {\n  const [{ isOver, canDrop }, drop] = useDrop({\n    accept,\n    drop: onDrop,\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  })\n  const isActive = isOver && canDrop\n  let backgroundColor = 'white'\n  if (isActive) {\n    backgroundColor = 'darkgreen'\n  } else if (canDrop) {\n    backgroundColor = 'darkkhaki'\n  }\n  return (\n    <div ref={drop} style={{ ...style, backgroundColor }}>\n      {isActive\n        ? 'Release to drop'\n        : `This dustbin accepts: ${accept.join(', ')}`}\n\n      {lastDroppedItem && (\n        <p>Last dropped: {JSON.stringify(lastDroppedItem)}</p>\n      )}\n    </div>\n  )\n}\nexport default Dustbin\n\n"]},"metadata":{},"sourceType":"module"}