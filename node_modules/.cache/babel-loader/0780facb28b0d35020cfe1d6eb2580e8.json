{"ast":null,"code":"import _slicedToArray from \"/home/gabriella/Documentos/lar_front_end/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gabriella/Documentos/lar_front_end/src/pages/Actions.js\";\nimport React, { Component, useState, useCallback } from 'react';\nimport { isAuthenticated } from '../services/auth';\nimport { Redirect } from 'react-router';\nimport Footer from '../components/Footer';\nimport Dustbin from '../components/plugin/Dustbin';\nimport Box from '../components/plugin/Box';\nimport ItemTypes from '../components/plugin/ItemTypes';\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport update from 'immutability-helper';\nimport api from \"../services/api\";\nimport \"../components/Action.css\";\n\nclass Actions extends Component {\n  constructor(props) {\n    super(props);\n\n    this.populateAuthorizations = async () => {\n      const request = await api.get('/authorization/full');\n\n      if (request !== undefined) {\n        this.setState({\n          authorizations: request.data.authorizations\n        });\n        console.log(this.state.authorizations);\n      }\n    };\n\n    var _useState$boxes = useState([{\n      accepts: [ItemTypes.BOX],\n      lastDroppedItem: null\n    }])[boxes] = useState([{\n      name: 'Bottle',\n      type: ItemTypes.GLASS\n    }, {\n      name: 'Banana',\n      type: ItemTypes.FOOD\n    }, {\n      name: 'Magazine',\n      type: ItemTypes.PAPER\n    }])[(droppedBoxNames, setDroppedBoxNames)] = useState([]);\n\n    var _useState$boxes2 = _slicedToArray(_useState$boxes, 2);\n\n    dustbins = _useState$boxes2[0];\n    setDustbins = _useState$boxes2[1];\n    handleDrop = useCallback((index, item) => {\n      const name = item.name;\n      setDroppedBoxNames(update(droppedBoxNames, name ? {\n        $push: [name]\n      } : {\n        $push: []\n      }));\n      setDustbins(update(dustbins, {\n        [index]: {\n          lastDroppedItem: {\n            $set: item\n          }\n        }\n      }));\n    }, [droppedBoxNames, dustbins]);\n  }\n\n  async componentDidMount() {\n    if (isAuthenticated()) {\n      document.title = \"Autorizações\";\n      await this.populateAuthorizations();\n    }\n  }\n\n  async isDropped(boxName) {\n    return this.droppedBoxNames.indexOf(boxName) > -1;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, !isAuthenticated() ? React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }) : // <div className=\"container\"> \n    //     <div className=\"card\">\n    //         <div className=\"card-body\">\n    //             <div class=\"row align-items-center\">\n    //                 <button type=\"button\" className=\"btn btn-success\"onClick={()=> this.clickEsquerda(this.state.device_id, this.state.user_id)} value=\"{this.state.device_id}\">\n    //                     <i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i>\n    //                 </button> \n    //             </div>\n    //             <div class=\"row setas-grid\">\n    //                 <button type=\"button\" className=\"btn btn-success\" onClick={()=> this.clickAndar(this.state.device_id, this.state.user_id)}>\n    //                     <i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i>\n    //                 </button>\n    //                 <button type=\"button\" className=\"btn btn-danger\"onClick={()=> this.clickParar(this.state.device_id, this.state.user_id)} value=\"{this.state.device_id}\">\n    //                     <i class=\"fa fa-stop\" aria-hidden=\"true\"></i>\n    //                 </button> \n    //                 <button type=\"button\" className=\"btn btn-success\"onClick={()=> this.clickRe(this.state.device_id, this.state.user_id)} value=\"{this.state.device_id}\">\n    //                     <i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i>\n    //                 </button> \n    //             </div>\n    //             <div class=\"row align-items-center\">\n    //                 <button type=\"button\" className=\"btn btn-success\"onClick={()=> this.clickDireita(this.state.device_id, this.state.user_id)} value=\"{this.state.device_id}\">\n    //                     <i class=\"fa fa-arrow-right\" aria-hidden=\"true\"></i>\n    //                 </button>\n    //             </div>\n    //         </div>\n    //         <div>\n    //             <DndProvider backend={HTML5Backend}>\n    //                 <div>\n    //                   <div style={{ overflow: 'hidden', clear: 'both' }}>\n    //                     <Dustbin \n    //                         lastDroppedItem={lastDroppedItem}\n    //                         onDrop={() => this.teste()}\n    //                     />\n    //                   </div>\n    //                   <div style={{ overflow: 'hidden', clear: 'both' }}>\n    //                     <Box classe='btn btn-success' content='<i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i>' />\n    //                     <Box classe='btn btn-danger' content='<i class=\"fa fa-stop\" aria-hidden=\"true\"></i>' />\n    //                     <Box classe='btn btn-success' content='<i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i>' />\n    //                   </div>\n    //                 </div>\n    //             </DndProvider>\n    //         </div>\n    //     </div>\n    // </div>\n    React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        overflow: 'hidden',\n        clear: 'both'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, this.dustbins.map(({\n      accepts,\n      lastDroppedItem\n    }, index) => React.createElement(Dustbin, {\n      accept: accepts,\n      lastDroppedItem: lastDroppedItem,\n      onDrop: item => this.handleDrop(index, item),\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      style: {\n        overflow: 'hidden',\n        clear: 'both'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, this.boxes.map(({\n      name,\n      type\n    }, index) => React.createElement(Box, {\n      name: name,\n      type: type,\n      isDropped: this.isDropped(name),\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Actions; // const Container = () => {\n//   const [dustbins, setDustbins] = useState([\n//     { accepts: [ItemTypes.BOX], lastDroppedItem: null },\n//   ])\n//   const [boxes] = useState([\n//     { name: 'Bottle', type: ItemTypes.GLASS },\n//     { name: 'Banana', type: ItemTypes.FOOD },\n//     { name: 'Magazine', type: ItemTypes.PAPER },\n//   ])\n//   const [droppedBoxNames, setDroppedBoxNames] = useState([])\n//   function isDropped(boxName) {\n//     return droppedBoxNames.indexOf(boxName) > -1\n//   }\n//   const handleDrop = useCallback(\n//     (index, item) => {\n//       const { name } = item\n//       setDroppedBoxNames(\n//         update(droppedBoxNames, name ? { $push: [name] } : { $push: [] }),\n//       )\n//       setDustbins(\n//         update(dustbins, {\n//           [index]: {\n//             lastDroppedItem: {\n//               $set: item,\n//             },\n//           },\n//         }),\n//       )\n//     },\n//     [droppedBoxNames, dustbins],\n//   )\n//   return (\n//     <div>\n//       <div style={{ overflow: 'hidden', clear: 'both' }}>\n//         {dustbins.map(({ accepts, lastDroppedItem }, index) => (\n//           <Dustbin\n//             accept={accepts}\n//             lastDroppedItem={lastDroppedItem}\n//             onDrop={item => handleDrop(index, item)}\n//             key={index}\n//           />\n//         ))}\n//       </div>\n//       <div style={{ overflow: 'hidden', clear: 'both' }}>\n//         {boxes.map(({ name, type }, index) => (\n//           <Box\n//             name={name}\n//             type={type}\n//             isDropped={isDropped(name)}\n//             key={index}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   )\n// }\n// export default Container","map":{"version":3,"sources":["/home/gabriella/Documentos/lar_front_end/src/pages/Actions.js"],"names":["React","Component","useState","useCallback","isAuthenticated","Redirect","Footer","Dustbin","Box","ItemTypes","DndProvider","HTML5Backend","update","api","Actions","constructor","props","populateAuthorizations","request","get","undefined","setState","authorizations","data","console","log","state","accepts","BOX","lastDroppedItem","boxes","name","type","GLASS","FOOD","PAPER","droppedBoxNames","setDroppedBoxNames","dustbins","setDustbins","handleDrop","index","item","$push","$set","componentDidMount","document","title","isDropped","boxName","indexOf","render","overflow","clear","map"],"mappings":"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","sourcesContent":["import React, { Component, useState, useCallback } from 'react';\nimport { isAuthenticated } from '../services/auth'; \nimport { Redirect } from 'react-router'\nimport Footer from '../components/Footer'; \n\nimport Dustbin from '../components/plugin/Dustbin';\nimport Box from '../components/plugin/Box';\nimport ItemTypes from '../components/plugin/ItemTypes';\nimport { DndProvider } from 'react-dnd'\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport update from 'immutability-helper'\n\nimport api from \"../services/api\";\n\nimport \"../components/Action.css\" \n\nclass Actions extends Component { \n    constructor(props){ \n        super(props);\n\n        [dustbins, setDustbins] = useState([\n            { accepts: [ItemTypes.BOX], lastDroppedItem: null },\n        ])\n         [boxes] = useState([\n            { name: 'Bottle', type: ItemTypes.GLASS },\n            { name: 'Banana', type: ItemTypes.FOOD },\n            { name: 'Magazine', type: ItemTypes.PAPER },\n        ])\n         [droppedBoxNames, setDroppedBoxNames] = useState([])\n         handleDrop = useCallback(\n            (index, item) => {\n              const { name } = item\n              setDroppedBoxNames(\n                update(droppedBoxNames, name ? { $push: [name] } : { $push: [] }),\n              )\n              setDustbins(\n                update(dustbins, {\n                  [index]: {\n                    lastDroppedItem: {\n                      $set: item,\n                    },\n                  },\n                }),\n              )\n            },\n            [droppedBoxNames, dustbins],\n        )\n    }\n\n    populateAuthorizations = async () => {\n        const request = await api.get('/authorization/full');\n        if(request !== undefined){\n            this.setState({authorizations: request.data.authorizations}); \n            console.log(this.state.authorizations); \n        }\n    }\n\n    async componentDidMount() {\n\n        if (isAuthenticated()) {\n            document.title = \"Autorizações\";\n            await this.populateAuthorizations();  \n        }\n    }\n\n    async isDropped(boxName) {\n        return this.droppedBoxNames.indexOf(boxName) > -1\n    }\n    \n  \n  \n  \n\n    render() {\n        return ( \n            <div >\n                { (!isAuthenticated() ) ? \n                <Redirect to=\"/login\"/> : \n                // <div className=\"container\"> \n                //     <div className=\"card\">\n                //         <div className=\"card-body\">\n                //             <div class=\"row align-items-center\">\n                //                 <button type=\"button\" className=\"btn btn-success\"onClick={()=> this.clickEsquerda(this.state.device_id, this.state.user_id)} value=\"{this.state.device_id}\">\n                //                     <i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i>\n                //                 </button> \n                //             </div>\n                //             <div class=\"row setas-grid\">\n                //                 <button type=\"button\" className=\"btn btn-success\" onClick={()=> this.clickAndar(this.state.device_id, this.state.user_id)}>\n                //                     <i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i>\n                //                 </button>\n                //                 <button type=\"button\" className=\"btn btn-danger\"onClick={()=> this.clickParar(this.state.device_id, this.state.user_id)} value=\"{this.state.device_id}\">\n                //                     <i class=\"fa fa-stop\" aria-hidden=\"true\"></i>\n                //                 </button> \n                //                 <button type=\"button\" className=\"btn btn-success\"onClick={()=> this.clickRe(this.state.device_id, this.state.user_id)} value=\"{this.state.device_id}\">\n                //                     <i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i>\n                //                 </button> \n                //             </div>\n                //             <div class=\"row align-items-center\">\n                //                 <button type=\"button\" className=\"btn btn-success\"onClick={()=> this.clickDireita(this.state.device_id, this.state.user_id)} value=\"{this.state.device_id}\">\n                //                     <i class=\"fa fa-arrow-right\" aria-hidden=\"true\"></i>\n                //                 </button>\n                //             </div>\n                //         </div>\n                //         <div>\n                //             <DndProvider backend={HTML5Backend}>\n                //                 <div>\n                //                   <div style={{ overflow: 'hidden', clear: 'both' }}>\n                //                     <Dustbin \n                //                         lastDroppedItem={lastDroppedItem}\n                //                         onDrop={() => this.teste()}\n                //                     />\n                //                   </div>\n                //                   <div style={{ overflow: 'hidden', clear: 'both' }}>\n                //                     <Box classe='btn btn-success' content='<i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i>' />\n                //                     <Box classe='btn btn-danger' content='<i class=\"fa fa-stop\" aria-hidden=\"true\"></i>' />\n                //                     <Box classe='btn btn-success' content='<i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i>' />\n                //                   </div>\n                //                 </div>\n                //             </DndProvider>\n                //         </div>\n                //     </div>\n                // </div>\n                <div>\n      <div style={{ overflow: 'hidden', clear: 'both' }}>\n        {this.dustbins.map(({ accepts, lastDroppedItem }, index) => (\n          <Dustbin\n            accept={accepts}\n            lastDroppedItem={lastDroppedItem}\n            onDrop={item => this.handleDrop(index, item)}\n            key={index}\n          />\n        ))}\n      </div>\n\n      <div style={{ overflow: 'hidden', clear: 'both' }}>\n        {this.boxes.map(({ name, type }, index) => (\n          <Box\n            name={name}\n            type={type}\n            isDropped={this.isDropped(name)}\n            key={index}\n          />\n        ))}\n      </div>\n    </div>\n                }\n            <Footer>\n\n            </Footer>\n            </div>\n        );\n    }\n}\n\nexport default Actions; \n\n// const Container = () => {\n//   const [dustbins, setDustbins] = useState([\n//     { accepts: [ItemTypes.BOX], lastDroppedItem: null },\n//   ])\n//   const [boxes] = useState([\n//     { name: 'Bottle', type: ItemTypes.GLASS },\n//     { name: 'Banana', type: ItemTypes.FOOD },\n//     { name: 'Magazine', type: ItemTypes.PAPER },\n//   ])\n//   const [droppedBoxNames, setDroppedBoxNames] = useState([])\n//   function isDropped(boxName) {\n//     return droppedBoxNames.indexOf(boxName) > -1\n//   }\n//   const handleDrop = useCallback(\n//     (index, item) => {\n//       const { name } = item\n//       setDroppedBoxNames(\n//         update(droppedBoxNames, name ? { $push: [name] } : { $push: [] }),\n//       )\n//       setDustbins(\n//         update(dustbins, {\n//           [index]: {\n//             lastDroppedItem: {\n//               $set: item,\n//             },\n//           },\n//         }),\n//       )\n//     },\n//     [droppedBoxNames, dustbins],\n//   )\n//   return (\n//     <div>\n//       <div style={{ overflow: 'hidden', clear: 'both' }}>\n//         {dustbins.map(({ accepts, lastDroppedItem }, index) => (\n//           <Dustbin\n//             accept={accepts}\n//             lastDroppedItem={lastDroppedItem}\n//             onDrop={item => handleDrop(index, item)}\n//             key={index}\n//           />\n//         ))}\n//       </div>\n\n//       <div style={{ overflow: 'hidden', clear: 'both' }}>\n//         {boxes.map(({ name, type }, index) => (\n//           <Box\n//             name={name}\n//             type={type}\n//             isDropped={isDropped(name)}\n//             key={index}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   )\n// }\n// export default Container\n"]},"metadata":{},"sourceType":"module"}